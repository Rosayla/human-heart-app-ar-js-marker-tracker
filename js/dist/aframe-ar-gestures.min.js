AFRAME.registerComponent("gesture-handler",{schema:{enabled:{default:!0},rotationFactor:{default:5},minScale:{default:.3},maxScale:{default:8}},init:function(){this.handleScale=this.handleScale.bind(this),this.handleRotation=this.handleRotation.bind(this),this.isVisible=!1,this.initialScale=this.el.object3D.scale.clone(),this.scaleFactor=1,this.el.sceneEl.addEventListener("markerFound",e=>{this.isVisible=!0}),this.el.sceneEl.addEventListener("markerLost",e=>{this.isVisible=!1})},update:function(){this.data.enabled?(this.el.sceneEl.addEventListener("onefingermove",this.handleRotation),this.el.sceneEl.addEventListener("twofingermove",this.handleScale)):(this.el.sceneEl.removeEventListener("onefingermove",this.handleRotation),this.el.sceneEl.removeEventListener("twofingermove",this.handleScale))},remove:function(){this.el.sceneEl.removeEventListener("onefingermove",this.handleRotation),this.el.sceneEl.removeEventListener("twofingermove",this.handleScale)},handleRotation:function(e){this.isVisible&&(this.el.object3D.rotation.y+=e.detail.positionChange.x*this.data.rotationFactor,this.el.object3D.rotation.x+=e.detail.positionChange.y*this.data.rotationFactor)},handleScale:function(e){this.isVisible&&(this.scaleFactor*=1+e.detail.spreadChange/e.detail.startSpread,this.scaleFactor=Math.min(Math.max(this.scaleFactor,this.data.minScale),this.data.maxScale),this.el.object3D.scale.x=this.scaleFactor*this.initialScale.x,this.el.object3D.scale.y=this.scaleFactor*this.initialScale.y,this.el.object3D.scale.z=this.scaleFactor*this.initialScale.z)}}),AFRAME.registerComponent("gesture-detector",{schema:{element:{default:""}},init:function(){this.targetElement=this.data.element&&document.querySelector(this.data.element),this.targetElement||(this.targetElement=this.el),this.internalState={previousState:null},this.emitGestureEvent=this.emitGestureEvent.bind(this),this.targetElement.addEventListener("touchstart",this.emitGestureEvent),this.targetElement.addEventListener("touchend",this.emitGestureEvent),this.targetElement.addEventListener("touchmove",this.emitGestureEvent)},remove:function(){this.targetElement.removeEventListener("touchstart",this.emitGestureEvent),this.targetElement.removeEventListener("touchend",this.emitGestureEvent),this.targetElement.removeEventListener("touchmove",this.emitGestureEvent)},emitGestureEvent(e){let t=this.getTouchState(e),i=this.internalState.previousState,n=i&&t&&t.touchCount==i.touchCount,s=t&&!n;if(i&&!n){let a=this.getEventPrefix(i.touchCount)+"fingerend";this.el.emit(a,i),this.internalState.previousState=null}if(s){t.startTime=performance.now(),t.startPosition=t.position,t.startSpread=t.spread;let o=this.getEventPrefix(t.touchCount)+"fingerstart";this.el.emit(o,t),this.internalState.previousState=t}if(n){let l={positionChange:{x:t.position.x-i.position.x,y:t.position.y-i.position.y}};t.spread&&(l.spreadChange=t.spread-i.spread),Object.assign(i,t),Object.assign(l,i);let h=this.getEventPrefix(t.touchCount)+"fingermove";this.el.emit(h,l)}},getTouchState:function(e){if(0===e.touches.length)return null;let t=[];for(let i=0;i<e.touches.length;i++)t.push(e.touches[i]);let n={touchCount:t.length},s=t.reduce((e,t)=>e+t.clientX,0)/t.length,a=t.reduce((e,t)=>e+t.clientY,0)/t.length;n.positionRaw={x:s,y:a};let o=2/(window.innerWidth+window.innerHeight);if(n.position={x:s*o,y:a*o},t.length>=2){let l=t.reduce((e,t)=>e+Math.sqrt(Math.pow(s-t.clientX,2)+Math.pow(a-t.clientY,2)),0)/t.length;n.spread=l*o}return n},getEventPrefix:e=>["one","two","three","many"][Math.min(e,4)-1]});